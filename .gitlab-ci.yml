# This template uses the java:8 docker image because there isn't any
# official Gradle image at this moment
#
# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle
image: openjdk:8

stages:
  - build
  - test
  - staging
  - deploy

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"

# Make the gradle wrapper executable. This essentially downloads a copy of
# Gradle to build the project with.
# https://docs.gradle.org/current/userguide/gradle_wrapper.html
# It is expected that any modern gradle project has a wrapper
# setter opp brukernavn på git slik at gitlab-runner kan bruke gitlab
before_script:
  - cd src/
  - git config user.email "heg063@student.uib.no"
  - git config user.name "Runner"
  - chmod +x gradlew


# Merger master inn i branchen som skal bygges.
# På denne måten får vi tidlig beskjed om det er noen potesielle problemer
# med brancher som henger for mye etter master i fremdriften
# Bygger en jacoco rapport som kjører alle enhetstestene.
build branch:
  stage: build
  script:
  - git merge origin/master --no-commit --no-ff
  - ./gradlew build
  - ./gradlew jacocoTestReport
  allow_failure: false
  except:
    - master

# Denne bygger master for å se om noen endringer har ødelagt noe.
# Da unngår vi at feil sniker seg inn i master.
# Denne lager også jacocorapport, forskjellen her er at denne rapporten blir sendt
# til SonarQube for å beregne testdekningen.
build master:
  stage: build 
  script:
  - ./gradlew build
  - ./gradlew jacocoTestReport
  allow_failure: false
  only:
    - master

# Genererer Javadoc og lagrer denne som er artifact som senere kan lastes ned.
apidocs:
  script:
    - ./gradlew alljavadoc
  artifacts:
    name: "masterapi"
    paths:
      - src/docs/javadoc/
  stage: build
  only:
    - master

# Sonarqube skann av commit, SonarQube publiserer kommentarere direkte på commiten
# om den er misfornøyd med noe. Kommentarene er publiser under Håvar Eggereide da
# SonarQube bruker denne kontoen til å logge seg på med.
# SonarQube henter inn og merger med master branch for å kunne måle endringer og nye feil kontra det den har
# lagret på server.
sonarqube_branch_preview:
  script:
  - git merge origin/master --no-commit --no-ff
  - ./gradlew sonarqube -Dsonar.analysis.mode=preview -Dsonar.gitlab.project_id=$CI_PROJECT_PATH -Dsonar.gitlab.commit_sha=$CI_BUILD_REF -Dsonar.gitlab.ref_name=$CI_BUILD_REF_NAME
  stage: test
  except:
    - master

# Sonarqube skann av commit, SonarQube publiserer kommentarere direkte på commiten
# om den er misfornøyd med noe. Kommentarene er publiser under Håvar Eggereide da
# SonarQube bruker denne kontoen til å logge seg på med.
sonarqube_master_preview:
  script:
  - ./gradlew sonarqube -Dsonar.analysis.mode=preview -Dsonar.gitlab.project_id=$CI_PROJECT_PATH -Dsonar.gitlab.commit_sha=$CI_BUILD_REF -Dsonar.gitlab.ref_name=$CI_BUILD_REF_NAME
  stage: test
  allow_failure: false
  only:
    - master

# SonarQube gjør statisk kodeanalyse av masterbranchen og lagrer rapporten på serveren.
sonarqube:
  script:
    - ./gradlew sonarqube
  stage: test
  only:
    - master

# Denne jobben laster ned artifacten fra javadocjobben og publiserer den på serveren.
publiserapi:
  stage: staging
  script:
    - cp -R docs/javadoc/ /srv/nginx/pages/gitlabapi/public/
  environment:
    name: api/master
    url: http://158.39.74.42:80/
  dependencies:
  - apidocs
  only:
    - master
  tags:
  - bash

# På brancher med deploy-web i navnet sitt blir denne jobben tilgjengelig.
# Denne jobben henter ut index.html fra continousdeployment/web/ og publiserer den 
# på serveren
# Må trigges manuelt
publiserweb:
  stage: deploy
  script:
    - cd ../continousdeployment/web/
    - ls -la
    - cp index.html /srv/nginx/pages/gitlabapi/public/
  environment:
    name: nettside/index
    url: http://158.39.74.42:80/index.html
  only:
    - /.*deploy-web.*$/
  tags:
    - bash
  when: manual
    
# Denne jobben blir tilgjengelig på alle brancher som har 
# carlthecrasher-release i navnet sitt.
# Denne jobben bruker gradle task "dist" til å bygge car-game i en
# jar fil og publiserer denne filen på nettsiden. 
# Må trigges manuelt
publisercarlthecrasher:
  stage: deploy
  script:
    - ./gradlew build && ./gradlew teamdank-cargame:dist
    - cd car-game/build/libs/
    - ls -la
    - mv *.jar carlthecrasher.jar
    - cp carlthecrasher.jar /srv/nginx/pages/gitlabapi/public/apps/
  environment:
    name: nettside/carlthecrasher
    url: http://158.39.74.42:80/apps/carlthecrasher.jar
  only:
    - /.*carlthecrasher-release.*$/
  tags:
    - bash
  when: manual

# Denne jobben blir tilgjengelig på alle brancher med
# foodfeud-release i navnet sitt.
# Denne jobben bruker gradle task "dist" til å bygger 
# foodfeud inn i en jar fil og publiserer denne på nettsiden.
# Må trigges manuelt
publiserfoodfeud:
  stage: deploy
  script:
    - ./gradlew build && ./gradlew teamdank-foodfeud:dist
    - cd food-feud/build/libs/
    - ls -la
    - mv *.jar foodfeud.jar
    - cp foodfeud.jar /srv/nginx/pages/gitlabapi/public/apps/
  environment:
    name: nettside/foodfeud
    url: http://158.39.74.42:80/apps/foodfeud.jar
  only:
    - /.*foodfeud-release.*$/
  tags:
    - bash
  when: manual